!function(){const e="mib-neuralizer-v3",r=["./","./index.html","./assets/css/styles.min.css","./assets/img/base.png","./assets/img/buttons.png","./assets/img/favicon-dark-mode.svg","./assets/img/head.png","https://rokrypto.github.io/mib-neuralizer/assets/img/men-in-black-neuralizer-rokrypto.jpg","./assets/js/scripts.min.js","./assets/sound/neuralizer.mp3"];self.addEventListener("install",(s=>{s.waitUntil((async()=>{console.log("[Service Worker] Installing...");const s=await caches.open(e);try{console.log("[Service Worker] Precaching assets..."),await s.addAll(r),console.log("[Service Worker] All assets cached!")}catch(t){console.error("[Service Worker] Precaching failed:",t)}})())})),self.addEventListener("activate",(r=>{r.waitUntil((async()=>{console.log("[Service Worker] Activating...");const r=await caches.keys();for(const s of r)s!==e&&(console.log(`[Service Worker] Deleting old cache: ${s}`),await caches.delete(s));await self.clients.claim(),console.log("[Service Worker] Activation complete.")})())})),self.addEventListener("fetch",(r=>{r.respondWith((async()=>{if("/assets/sound/neuralizer.mp3"===new URL(r.request.url).pathname)try{const e=await caches.match("./assets/sound/neuralizer.mp3");return e?(console.log("[Service Worker] Serving neuralizer.mp3 from cache."),e):(console.log("[Service Worker] neuralizer.mp3 not found in cache, fetching from network..."),await fetch(r.request))}catch(s){console.error("[Service Worker] Fetch failed for neuralizer.mp3:",s)}try{const s=await fetch(r.request),t=await caches.open(e);return s&&200===s.status&&"basic"===s.type&&(console.log(`[Service Worker] Caching response for: ${r.request.url}`),t.put(r.request,s.clone())),s}catch(s){console.error(`[Service Worker] Network error for: ${r.request.url}`,s);const e=await caches.match(r.request);if(e)return console.log(`[Service Worker] Serving from cache: ${r.request.url}`),e}})())}))}();