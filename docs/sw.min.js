!function(){const e="mib-neuralizer-v3",t=["./","./index.html","./assets/css/styles.min.css","./assets/img/base.png","./assets/img/buttons.png","./assets/img/favicon-dark-mode.svg","./assets/img/head.png","https://rokrypto.github.io/mib-neuralizer/assets/img/men-in-black-neuralizer-rokrypto.jpg","./assets/js/scripts.min.js","./assets/sound/neuralizer.mp3"];self.addEventListener("install",(s=>{s.waitUntil((async()=>{try{const s=await caches.open(e);await s.addAll(t)}catch(s){console.error("Failed to pre-cache assets:",s)}})())})),self.addEventListener("activate",(t=>{t.waitUntil((async()=>{try{const t=await caches.keys();await Promise.all(t.map((t=>{if(t!==e)return caches.delete(t)})))}catch(t){console.error("Failed to clean up old caches:",t)}})()),self.clients.claim()})),self.addEventListener("fetch",(t=>{new URL(t.request.url).pathname.endsWith(".mp3")?t.respondWith((async()=>{try{if(t.request.headers.get("range"))return await fetch(t.request);const s=await caches.open(e),a=await s.match(t.request);if(a)return a;const r=await fetch(t.request);return await s.put(t.request,r.clone()),r}catch(s){throw console.error("Failed to fetch or cache the audio file:",s),s}})()):t.respondWith((async()=>{try{const s=await caches.match(t.request);if(s)return s;const a=await fetch(t.request);return(await caches.open(e)).put(t.request,a.clone()),a}catch(s){throw console.error("Fetch failed:",s),s}})())}))}();